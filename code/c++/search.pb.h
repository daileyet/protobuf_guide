// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: search.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_search_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_search_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_search_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_search_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_search_2eproto;
namespace example {
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
class SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
}  // namespace example
PROTOBUF_NAMESPACE_OPEN
template<> ::example::Result* Arena::CreateMaybeMessage<::example::Result>(Arena*);
template<> ::example::SearchRequest* Arena::CreateMaybeMessage<::example::SearchRequest>(Arena*);
template<> ::example::SearchResponse* Arena::CreateMaybeMessage<::example::SearchResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace example {

enum SearchRequest_Corpus : int {
  SearchRequest_Corpus_UNIVERSAL = 0,
  SearchRequest_Corpus_WEB = 1,
  SearchRequest_Corpus_IMAGES = 2,
  SearchRequest_Corpus_LOCAL = 3,
  SearchRequest_Corpus_NEWS = 4,
  SearchRequest_Corpus_PRODUCTS = 5,
  SearchRequest_Corpus_VIDEO = 6
};
bool SearchRequest_Corpus_IsValid(int value);
constexpr SearchRequest_Corpus SearchRequest_Corpus_Corpus_MIN = SearchRequest_Corpus_UNIVERSAL;
constexpr SearchRequest_Corpus SearchRequest_Corpus_Corpus_MAX = SearchRequest_Corpus_VIDEO;
constexpr int SearchRequest_Corpus_Corpus_ARRAYSIZE = SearchRequest_Corpus_Corpus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SearchRequest_Corpus_descriptor();
template<typename T>
inline const std::string& SearchRequest_Corpus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SearchRequest_Corpus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SearchRequest_Corpus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SearchRequest_Corpus_descriptor(), enum_t_value);
}
inline bool SearchRequest_Corpus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SearchRequest_Corpus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SearchRequest_Corpus>(
    SearchRequest_Corpus_descriptor(), name, value);
}
// ===================================================================

class SearchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {}
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return CreateMaybeMessage<SearchRequest>(nullptr);
  }

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_search_2eproto);
    return ::descriptor_table_search_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SearchRequest_Corpus Corpus;
  static constexpr Corpus UNIVERSAL =
    SearchRequest_Corpus_UNIVERSAL;
  static constexpr Corpus WEB =
    SearchRequest_Corpus_WEB;
  static constexpr Corpus IMAGES =
    SearchRequest_Corpus_IMAGES;
  static constexpr Corpus LOCAL =
    SearchRequest_Corpus_LOCAL;
  static constexpr Corpus NEWS =
    SearchRequest_Corpus_NEWS;
  static constexpr Corpus PRODUCTS =
    SearchRequest_Corpus_PRODUCTS;
  static constexpr Corpus VIDEO =
    SearchRequest_Corpus_VIDEO;
  static inline bool Corpus_IsValid(int value) {
    return SearchRequest_Corpus_IsValid(value);
  }
  static constexpr Corpus Corpus_MIN =
    SearchRequest_Corpus_Corpus_MIN;
  static constexpr Corpus Corpus_MAX =
    SearchRequest_Corpus_Corpus_MAX;
  static constexpr int Corpus_ARRAYSIZE =
    SearchRequest_Corpus_Corpus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Corpus_descriptor() {
    return SearchRequest_Corpus_descriptor();
  }
  template<typename T>
  static inline const std::string& Corpus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Corpus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Corpus_Name.");
    return SearchRequest_Corpus_Name(enum_t_value);
  }
  static inline bool Corpus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Corpus* value) {
    return SearchRequest_Corpus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kPageNumberFieldNumber = 2,
    kCorpusFieldNumber = 4,
    kResultPerPageFieldNumber = 3,
  };
  // required string query = 1;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const std::string& query() const;
  void set_query(const std::string& value);
  void set_query(std::string&& value);
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  std::string* mutable_query();
  std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // optional int32 page_number = 2;
  bool has_page_number() const;
  private:
  bool _internal_has_page_number() const;
  public:
  void clear_page_number();
  ::PROTOBUF_NAMESPACE_ID::int32 page_number() const;
  void set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_number() const;
  void _internal_set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .example.SearchRequest.Corpus corpus = 4 [default = UNIVERSAL];
  bool has_corpus() const;
  private:
  bool _internal_has_corpus() const;
  public:
  void clear_corpus();
  ::example::SearchRequest_Corpus corpus() const;
  void set_corpus(::example::SearchRequest_Corpus value);
  private:
  ::example::SearchRequest_Corpus _internal_corpus() const;
  void _internal_set_corpus(::example::SearchRequest_Corpus value);
  public:

  // optional int32 result_per_page = 3 [default = 10];
  bool has_result_per_page() const;
  private:
  bool _internal_has_result_per_page() const;
  public:
  void clear_result_per_page();
  ::PROTOBUF_NAMESPACE_ID::int32 result_per_page() const;
  void set_result_per_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result_per_page() const;
  void _internal_set_result_per_page(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:example.SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_number_;
  int corpus_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_per_page_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.SearchResponse) */ {
 public:
  inline SearchResponse() : SearchResponse(nullptr) {}
  virtual ~SearchResponse();

  SearchResponse(const SearchResponse& from);
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchResponse* New() const final {
    return CreateMaybeMessage<SearchResponse>(nullptr);
  }

  SearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchResponse& from);
  void MergeFrom(const SearchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.SearchResponse";
  }
  protected:
  explicit SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_search_2eproto);
    return ::descriptor_table_search_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // repeated .example.Result result = 1;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::example::Result* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::Result >*
      mutable_result();
  private:
  const ::example::Result& _internal_result(int index) const;
  ::example::Result* _internal_add_result();
  public:
  const ::example::Result& result(int index) const;
  ::example::Result* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::Result >&
      result() const;

  // @@protoc_insertion_point(class_scope:example.SearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::Result > result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_search_2eproto;
};
// -------------------------------------------------------------------

class Result PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:example.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  virtual ~Result();

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "example.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_search_2eproto);
    return ::descriptor_table_search_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnippetsFieldNumber = 3,
    kUrlFieldNumber = 1,
    kTitleFieldNumber = 2,
  };
  // repeated string snippets = 3;
  int snippets_size() const;
  private:
  int _internal_snippets_size() const;
  public:
  void clear_snippets();
  const std::string& snippets(int index) const;
  std::string* mutable_snippets(int index);
  void set_snippets(int index, const std::string& value);
  void set_snippets(int index, std::string&& value);
  void set_snippets(int index, const char* value);
  void set_snippets(int index, const char* value, size_t size);
  std::string* add_snippets();
  void add_snippets(const std::string& value);
  void add_snippets(std::string&& value);
  void add_snippets(const char* value);
  void add_snippets(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& snippets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_snippets();
  private:
  const std::string& _internal_snippets(int index) const;
  std::string* _internal_add_snippets();
  public:

  // required string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // @@protoc_insertion_point(class_scope:example.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> snippets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  friend struct ::TableStruct_search_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SearchRequest

// required string query = 1;
inline bool SearchRequest::_internal_has_query() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SearchRequest::has_query() const {
  return _internal_has_query();
}
inline void SearchRequest::clear_query() {
  query_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SearchRequest::query() const {
  // @@protoc_insertion_point(field_get:example.SearchRequest.query)
  return _internal_query();
}
inline void SearchRequest::set_query(const std::string& value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:example.SearchRequest.query)
}
inline std::string* SearchRequest::mutable_query() {
  // @@protoc_insertion_point(field_mutable:example.SearchRequest.query)
  return _internal_mutable_query();
}
inline const std::string& SearchRequest::_internal_query() const {
  return query_.Get();
}
inline void SearchRequest::_internal_set_query(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SearchRequest::set_query(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  query_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:example.SearchRequest.query)
}
inline void SearchRequest::set_query(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:example.SearchRequest.query)
}
inline void SearchRequest::set_query(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  query_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:example.SearchRequest.query)
}
inline std::string* SearchRequest::_internal_mutable_query() {
  _has_bits_[0] |= 0x00000001u;
  return query_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SearchRequest::release_query() {
  // @@protoc_insertion_point(field_release:example.SearchRequest.query)
  if (!_internal_has_query()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return query_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:example.SearchRequest.query)
}

// optional int32 page_number = 2;
inline bool SearchRequest::_internal_has_page_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SearchRequest::has_page_number() const {
  return _internal_has_page_number();
}
inline void SearchRequest::clear_page_number() {
  page_number_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchRequest::_internal_page_number() const {
  return page_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchRequest::page_number() const {
  // @@protoc_insertion_point(field_get:example.SearchRequest.page_number)
  return _internal_page_number();
}
inline void SearchRequest::_internal_set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  page_number_ = value;
}
inline void SearchRequest::set_page_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_number(value);
  // @@protoc_insertion_point(field_set:example.SearchRequest.page_number)
}

// optional int32 result_per_page = 3 [default = 10];
inline bool SearchRequest::_internal_has_result_per_page() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SearchRequest::has_result_per_page() const {
  return _internal_has_result_per_page();
}
inline void SearchRequest::clear_result_per_page() {
  result_per_page_ = 10;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchRequest::_internal_result_per_page() const {
  return result_per_page_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchRequest::result_per_page() const {
  // @@protoc_insertion_point(field_get:example.SearchRequest.result_per_page)
  return _internal_result_per_page();
}
inline void SearchRequest::_internal_set_result_per_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  result_per_page_ = value;
}
inline void SearchRequest::set_result_per_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result_per_page(value);
  // @@protoc_insertion_point(field_set:example.SearchRequest.result_per_page)
}

// optional .example.SearchRequest.Corpus corpus = 4 [default = UNIVERSAL];
inline bool SearchRequest::_internal_has_corpus() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SearchRequest::has_corpus() const {
  return _internal_has_corpus();
}
inline void SearchRequest::clear_corpus() {
  corpus_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::example::SearchRequest_Corpus SearchRequest::_internal_corpus() const {
  return static_cast< ::example::SearchRequest_Corpus >(corpus_);
}
inline ::example::SearchRequest_Corpus SearchRequest::corpus() const {
  // @@protoc_insertion_point(field_get:example.SearchRequest.corpus)
  return _internal_corpus();
}
inline void SearchRequest::_internal_set_corpus(::example::SearchRequest_Corpus value) {
  assert(::example::SearchRequest_Corpus_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  corpus_ = value;
}
inline void SearchRequest::set_corpus(::example::SearchRequest_Corpus value) {
  _internal_set_corpus(value);
  // @@protoc_insertion_point(field_set:example.SearchRequest.corpus)
}

// -------------------------------------------------------------------

// SearchResponse

// repeated .example.Result result = 1;
inline int SearchResponse::_internal_result_size() const {
  return result_.size();
}
inline int SearchResponse::result_size() const {
  return _internal_result_size();
}
inline void SearchResponse::clear_result() {
  result_.Clear();
}
inline ::example::Result* SearchResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:example.SearchResponse.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::Result >*
SearchResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:example.SearchResponse.result)
  return &result_;
}
inline const ::example::Result& SearchResponse::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::example::Result& SearchResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:example.SearchResponse.result)
  return _internal_result(index);
}
inline ::example::Result* SearchResponse::_internal_add_result() {
  return result_.Add();
}
inline ::example::Result* SearchResponse::add_result() {
  // @@protoc_insertion_point(field_add:example.SearchResponse.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::example::Result >&
SearchResponse::result() const {
  // @@protoc_insertion_point(field_list:example.SearchResponse.result)
  return result_;
}

// -------------------------------------------------------------------

// Result

// required string url = 1;
inline bool Result::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Result::has_url() const {
  return _internal_has_url();
}
inline void Result::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Result::url() const {
  // @@protoc_insertion_point(field_get:example.Result.url)
  return _internal_url();
}
inline void Result::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:example.Result.url)
}
inline std::string* Result::mutable_url() {
  // @@protoc_insertion_point(field_mutable:example.Result.url)
  return _internal_mutable_url();
}
inline const std::string& Result::_internal_url() const {
  return url_.Get();
}
inline void Result::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Result::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:example.Result.url)
}
inline void Result::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:example.Result.url)
}
inline void Result::set_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:example.Result.url)
}
inline std::string* Result::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Result::release_url() {
  // @@protoc_insertion_point(field_release:example.Result.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Result::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:example.Result.url)
}

// optional string title = 2;
inline bool Result::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Result::has_title() const {
  return _internal_has_title();
}
inline void Result::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Result::title() const {
  // @@protoc_insertion_point(field_get:example.Result.title)
  return _internal_title();
}
inline void Result::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:example.Result.title)
}
inline std::string* Result::mutable_title() {
  // @@protoc_insertion_point(field_mutable:example.Result.title)
  return _internal_mutable_title();
}
inline const std::string& Result::_internal_title() const {
  return title_.Get();
}
inline void Result::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Result::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:example.Result.title)
}
inline void Result::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:example.Result.title)
}
inline void Result::set_title(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:example.Result.title)
}
inline std::string* Result::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Result::release_title() {
  // @@protoc_insertion_point(field_release:example.Result.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return title_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Result::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:example.Result.title)
}

// repeated string snippets = 3;
inline int Result::_internal_snippets_size() const {
  return snippets_.size();
}
inline int Result::snippets_size() const {
  return _internal_snippets_size();
}
inline void Result::clear_snippets() {
  snippets_.Clear();
}
inline std::string* Result::add_snippets() {
  // @@protoc_insertion_point(field_add_mutable:example.Result.snippets)
  return _internal_add_snippets();
}
inline const std::string& Result::_internal_snippets(int index) const {
  return snippets_.Get(index);
}
inline const std::string& Result::snippets(int index) const {
  // @@protoc_insertion_point(field_get:example.Result.snippets)
  return _internal_snippets(index);
}
inline std::string* Result::mutable_snippets(int index) {
  // @@protoc_insertion_point(field_mutable:example.Result.snippets)
  return snippets_.Mutable(index);
}
inline void Result::set_snippets(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:example.Result.snippets)
  snippets_.Mutable(index)->assign(value);
}
inline void Result::set_snippets(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:example.Result.snippets)
  snippets_.Mutable(index)->assign(std::move(value));
}
inline void Result::set_snippets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  snippets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:example.Result.snippets)
}
inline void Result::set_snippets(int index, const char* value, size_t size) {
  snippets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:example.Result.snippets)
}
inline std::string* Result::_internal_add_snippets() {
  return snippets_.Add();
}
inline void Result::add_snippets(const std::string& value) {
  snippets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:example.Result.snippets)
}
inline void Result::add_snippets(std::string&& value) {
  snippets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:example.Result.snippets)
}
inline void Result::add_snippets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  snippets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:example.Result.snippets)
}
inline void Result::add_snippets(const char* value, size_t size) {
  snippets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:example.Result.snippets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Result::snippets() const {
  // @@protoc_insertion_point(field_list:example.Result.snippets)
  return snippets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Result::mutable_snippets() {
  // @@protoc_insertion_point(field_mutable_list:example.Result.snippets)
  return &snippets_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace example

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::example::SearchRequest_Corpus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::example::SearchRequest_Corpus>() {
  return ::example::SearchRequest_Corpus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_search_2eproto
